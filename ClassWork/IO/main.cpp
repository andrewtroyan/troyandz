#include <iostream>

/*
    int open(const char *filename, int flags);
    int open(const char *filename, int flags, mode_t mode);
mode используется для создания нового файла, чтобы указать для него режим

Возвращает файловый дескриптор, по которому можно обращаться к файлу. Если ошибка, то возвращает -1. Можно узнать, какая была ошибка.

Заголовочник - <fcntl.h>

Flags:

O_RDONLY
O_WRONLY
O_RDWR

O_CREAT создать файл, если он не сущетсвует
O_TRUNC стереть файл, если он существовал
O_APPEND дописывать все в конец

O_EXCL выдавать ошибку при неправильном использовании O_CREAT

O_DSYNC принудительная синхронизация записи
O_RSYNC принудительная синхронизация перед чтением
O_SYNC принудительная ПОЛНАЯ синхронизация записи

O_NONBLOCK открыть файл в неблокирующем режиме, если это возможно
O_NDELAY -//- (нет задержки)

O_NOCTTY если открываемый файл - терминальное устройство, то не делать его управляющим терминалом процесса

O_NOFOLLOW выдавать ошибку, если открываемый файл является символической ссылкой
O_DIRECTORY выдавать ошибку, eсли открываемый файл не является директорией

O_DIRECT попытаться минимизировать кэширования чтения/записи файла

O_ASYNC генерироваться сигнал, если есть возможность чтения или записи в файл
O_LARGEFILE разрешить очень большие файлы (больше 2Гб)
*/

/*
    int close(int fd);
    Возвращает 0, если все ок и -1, если все плохо.
*/

/*
size_t - беззнаковый

ssize_t read(int fd, void *buffer, size_t count);
Возвращает -1, если ошибка. Иначе возвращает количество прочитанных байт.

ssize_t write(int fd, const void *buffer, size_t count);
*/

using namespace std;

int main()
{
    cout << "Hello world!" << endl;
    return 0;
}
